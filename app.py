import streamlit as st
import joblib
import numpy as np
import re

# --- Page Configuration ---
st.set_page_config(
    page_title="AI vs. Human Text Detector",
    page_icon="✍️",
    layout="wide",
)

# --- Load Models and Preprocessing Objects ---
# Use caching to load them only once
@st.cache_resource
def load_assets():
    model = joblib.load("best_nn_model.pkl")
    vectorizer = joblib.load("tfidf_vectorizer.pkl")
    scaler = joblib.load("scaler.pkl")
    pca = joblib.load("pca.pkl")
    return model, vectorizer, scaler, pca

model, vectorizer, scaler, pca = load_assets()

# --- Text Cleaning Function (Copied from your notebook) ---
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# --- App Interface ---
st.title("✍️ AI vs. Human Text Detector")
st.markdown("Is the essay written by a student or generated by AI? Paste the text below to find out!")

user_input = st.text_area("Enter the essay text here:", height=250, placeholder="Start typing or paste your text...")

if st.button("Analyze Text"):
    if user_input.strip() == "":
        st.warning("Please enter some text to analyze.")
    else:
        # --- Start the spinner ---
        with st.spinner('Analyzing the text... This may take a moment.'):
            
            # 1. Clean the input text
            cleaned_input = clean_text(user_input)

            # 2. Vectorize using the loaded TF-IDF vectorizer
            vectorized_input = vectorizer.transform([cleaned_input]).toarray()

            # 3. Scale using the loaded StandardScaler
            scaled_input = scaler.transform(vectorized_input)
            
            # 4. Apply PCA using the loaded PCA model
            pca_input = pca.transform(scaled_input)

            # 5. Make a prediction
            prediction = model.predict(pca_input)
            prediction_proba = model.predict_proba(pca_input)
            
            # --- Display the result ---
            st.subheader("Analysis Complete!")
            
            if prediction[0] == 1:
                confidence = prediction_proba[0][1] * 100
                st.error(f"**Result: This text is likely AI-Generated** (Confidence: {confidence:.2f}%)")
                st.progress(int(confidence))
                st.markdown("""
                **Why?** The model detected patterns in word usage, sentence structure, and vocabulary that are highly characteristic of large language models. This includes factors like low perplexity and burstiness.
                """)
            else:
                confidence = prediction_proba[0][0] * 100
                st.success(f"**Result: This text is likely Human-Written** (Confidence: {confidence:.2f}%)")
                st.progress(int(confidence))
                st.markdown("""
                **Why?** The model identified linguistic features, such as varied sentence length, specific word choices, and a certain level of complexity, that are more typical of human writing.
                """)